from django.core.files.base import ContentFile
from django.shortcuts import render
from .models import *
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.cache import cache_control
from django.shortcuts import render, redirect
import json
from django.http import HttpResponse, JsonResponse
import traceback
import cv2

import base64
from django.conf import settings
from django.core.files.images import ImageFile
import os
import io
import face_recognition


############### function for Admin login ###########
@csrf_exempt
@cache_control(no_cache=True, must_revalidate=True, no_store=True)
def Admin_login_page(request):
    try:
        if request.method == "POST":
            data = json.loads(request.body.decode('utf-8'))

            username = data['username']
            password = data['password']

            if AdminUserMaster.objects.filter(Admin_username=username, Admin_password=password).exists():
                user_obj = AdminUserMaster.objects.get(Admin_username=username, Admin_password=password)
                request.session['admin_user_id'] = str(user_obj.id)
                request.session['admin_username'] = str(user_obj.Admin_username)
                send_data = {"status": "1", "msg": "User Login Successfully", "obj": user_obj.id}
            else:    
                send_data = {"status": "0", "msg": "Invalid Credential"}
        else:
            return render(request,'login.html')
    except:
        send_data = {"msg": "Something Went wrong","error": str(traceback.format_exc())}
        print(traceback.format_exc())
    return JsonResponse(send_data)




############### function for Admin logout ###########
@cache_control(no_cache=True, must_revalidate=True, no_store=True)
def Admin_logout(request):
    try:
        del request.session['admin_user_id']    
    except:
        print(traceback.print_exc())
    return redirect('Admin_login_page')





###############  function for Admin dashboard ###########
@cache_control(no_cache=True, must_revalidate=True, no_store=True)
def Admin_dashboard(request):
    return render(request,'dashboard.html')


def testing(request):
    return render (request,'test.html')


''' def image_encode():
	try:
		#path = "media/local_workers"
		path = os.path.join(settings.MEDIA_ROOT, 'dummy_image')
		# emp_img_list stores the list of images in the local_workers folder
		emp_img_list = os.listdir(path)
		# the for loop is use to get each image and generate the face recognition code for that image and store that code in the database
		image_name_list = []
		emp_id_list = []
		emp_obj = Employee_Table.objects.all().order_by('-id')
		for emp in emp_obj:
			emp_id_list.append(emp.employee_id)

		for img in emp_img_list:
			# current_img stores a single image from the local_workers folder
			currentimg = cv2.imread(f'{path}/{img}')
			# image_name stores the name of the single image
			image_name = os.path.splitext(img)[0]
			image_ext = os.path.splitext(img)[1]
			# print("page name", image_name, "image", image_ext)
			image_name_list.append(image_name)
			# encode stores the code generated by the face recognition module of the face in the image
			encode = face_recognition.face_encodings(currentimg)[0]
			if image_name in emp_id_list:
				# print("emp id does exists ", image_name, "table_emp id", emp_id_list)
				employee_obj = Employee_Table.objects.get(employee_id=image_name)
				# print("employee pickle obj", employee_obj.pickle_obj)
				employee_obj.pickle_obj = encode
				employee_obj.save()
			else:
				print("emp id does not exists ", image_name,  "table_emp id", emp_id_list)
				# emp_object = Employee_Table.objects.all()
				emp_object = Employee_Table(employee_id=image_name, pickle_obj=encode)
				emp_object.save()
				# # the if condition is used to check if the image name in the folder matches the image name in the database table
				# if image_name in str(image_obj.employee_id):
				# # the emp_image_obj stores the data of the worker in which the id matches with the id of the worker table
				# emp_image_obj = Employee_Table.objects.get(id = image_obj.id)
				# # this stores the face recognition code in pickle_obj in the worker table in the database
				# emp_image_obj.pickle_obj = encode
				# # this saves all the changes done before in the database
				# emp_image_obj.save()
		send_data = {'status': "1", 'msg': "Images Converted Successfully."}
	except Exception as e:
		print('Error on line {}'.format(
		    sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
		print("error", e)
		send_data = {'status': "0", 'msg': "Something Went Wrong"}
	return JsonResponse(send_data)'''

# print(image_encode())


@csrf_exempt
def saveImage(request):
    print(request.FILES.dict())
    image = request.FILES.get('picture')

    print(settings.MEDIA_ROOT)

    if image:
        print(type(image))
        # data = ContentFile(base64.b64decode(image.read()), name='temp.png')
        
        data = ImageFile(io.BytesIO(image.read()), name='1_aman.png')  # << the answer!

        
        Dummy.objects.create(image=data)


        return JsonResponse({'status':1,'msg':'Success'})    
    return JsonResponse({'status':0,'msg':'Success'})
